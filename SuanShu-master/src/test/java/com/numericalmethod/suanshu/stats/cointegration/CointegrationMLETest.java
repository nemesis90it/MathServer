/*
 * Copyright (c) Numerical Method Inc.
 * http://www.numericalmethod.com/
 *
 * THIS SOFTWARE IS LICENSED, NOT SOLD.
 *
 * YOU MAY USE THIS SOFTWARE ONLY AS DESCRIBED IN THE LICENSE.
 * IF YOU ARE NOT AWARE OF AND/OR DO NOT AGREE TO THE TERMS OF THE LICENSE,
 * DO NOT USE THIS SOFTWARE.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITH NO WARRANTY WHATSOEVER,
 * EITHER EXPRESS OR IMPLIED, INCLUDING, WITHOUT LIMITATION,
 * ANY WARRANTIES OF ACCURACY, ACCESSIBILITY, COMPLETENESS,
 * FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABILITY, NON-INFRINGEMENT,
 * TITLE AND USEFULNESS.
 *
 * IN NO EVENT AND UNDER NO LEGAL THEORY,
 * WHETHER IN ACTION, CONTRACT, NEGLIGENCE, TORT, OR OTHERWISE,
 * SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR
 * ANY CLAIMS, DAMAGES OR OTHER LIABILITIES,
 * ARISING AS A RESULT OF USING OR OTHER DEALINGS IN THE SOFTWARE.
 */
package com.numericalmethod.suanshu.stats.cointegration;

import com.numericalmethod.suanshu.vector.doubles.Vector;
import com.numericalmethod.suanshu.matrix.doubles.matrixtype.dense.DenseMatrix;
import com.numericalmethod.suanshu.matrix.doubles.AreMatrices;
import com.numericalmethod.suanshu.vector.doubles.dense.DenseVector;
import com.numericalmethod.suanshu.stats.timeseries.multivariate.realtime.SimpleMultiVariateTimeSeries;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author Kevin Sun
 */
public class CointegrationMLETest {

    /**
     * This values are obtained from R output of the following script:
     * library(urca)
     * data(finland)
     * sjf <- finland
     * summary(ca.jo(sjf, ecdet = "none", type="eigen", K=2))
     */
    @Test
    public void test_0010() {
        double[][] finland = new double[][]{
            {2.848664, 3.836539, 0.1731126, 0.01481509},
            {2.82801, 3.902982, 0.1012019, 0},
            {2.908186, 3.89688, 0.1320803, 0},
            {2.934326, 3.847045, 0.06999237, 0},
            {2.986127, 3.916454, 0.06531947, 0},
            {3.006543, 3.986216, 0.06531947, 0.0145988},
            {3.016235, 3.984211, 0.06531947, 0.01438874},
            {2.95403, 3.956458, 0.06531947, 0.01418463},
            {3.00275, 3.990079, 0.1612681, 0},
            {3.041873, 4.048979, 0.243495, 0.01398624},
            {3.033884, 4.053306, 0.1633086, 0},
            {3.058968, 4.066436, 0.1101092, 0},
            {3.03522, 4.088541, 0.1224831, 0},
            {3.087247, 4.146216, 0.1173385, 0},
            {3.100822, 4.125302, 0.1476438, 0.02739897},
            {3.05858, 4.108145, 0.1752969, 0},
            {3.039497, 4.095878, 0.2291256, 0.02666825},
            {3.07537, 4.157463, 0.242397, 0},
            {3.107436, 4.159411, 0.2403546, 0.01307208},
            {3.137721, 4.100841, 0.210909, 0.0129034},
            {3.127759, 4.169761, 0.1712606, 0.01273903},
            {3.128404, 4.199699, 0.1891316, 0.01257878},
            {3.199932, 4.197109, 0.1706706, 0.01242252},
            {3.068053, 4.178529, 0.1367138, 0.05989814},
            {3.072799, 4.178418, 0.1686451, 0.02298952},
            {3.084895, 4.192901, 0.1779788, 0.01129956},
            {3.135006, 4.260383, 0.1972102, 0},
            {3.099091, 4.222265, 0.1833211, 0.0111733},
            {3.090548, 4.219907, 0.1354046, 0.02197891},
            {3.078614, 4.276832, 0.06765865, 0},
            {3.110883, 4.293151, 0.06765865, 0.01081092},
            {3.024568, 4.199678, 0.06765865, 0.01069529},
            {3.083357, 4.276213, 0.1153802, 0.01058211},
            {3.04108, 4.299289, 0.2200187, 0.02083409},
            {3.117137, 4.341603, 0.2944591, 0.0102565},
            {3.026565, 4.293609, 0.06765865, 0.01015237},
            {3.046901, 4.315433, 0.1218636, 0.01005034},
            {2.99375, 4.32215, 0.09184965, 0.009950331},
            {3.006729, 4.312939, 0.1208893, 0.02927038},
            {2.991557, 4.30584, 0.09166719, 0.03774033},
            {3.047116, 4.333206, 0.06765865, 0.01834914},
            {3.073535, 4.380844, 0.06765865, 0},
            {3.180678, 4.3923, 0.06765865, 0.009049836},
            {3.135102, 4.420402, 0.06765865, 0},
            {3.193558, 4.4441, 0.06765865, 0.00896867},
            {3.196119, 4.489679, 0.06765865, 0},
            {3.333479, 4.518776, 0.0719485, 0},
            {3.411379, 4.490783, 0.08231704, 0.01769958},
            {3.459963, 4.536882, 0.1513468, 0},
            {3.451505, 4.561972, 0.2311117, 0.00873368},
            {3.530157, 4.619116, 0.1854001, 0.008658063},
            {3.297392, 4.51013, 0.07927318, 0.0255333},
            {3.280233, 4.575117, 0.1179608, 0.02489755},
            {3.307619, 4.569593, 0.09285262, 0.02429269},
            {3.451498, 4.631627, 0.08157999, 0.00796817},
            {3.437284, 4.60271, 0.07464354, 0.00790518},
            {3.485342, 4.62328, 0.07464354, 0.03101024},
            {3.500827, 4.64374, 0.07464354, 0.01515181},
            {3.606705, 4.715684, 0.07464354, 0.01492565},
            {3.508857, 4.689491, 0.07464354, 0.02919915},
            {3.580815, 4.691851, 0.07464354, 0.03533937},
            {3.494112, 4.703741, 0.09558287, 0.05406722},
            {3.66848, 4.80992, 0.2311117, 0.02597549},
            {3.49595, 4.745103, 0.1684761, 0.04389419},
            {3.553317, 4.809414, 0.1478164, 0.03614851},
            {3.536008, 4.751507, 0.08993211, 0.05748709},
            {3.689291, 4.880777, 0.1377599, 0.01662088},
            {3.64695, 4.762205, 0.1298873, 0.0586835},
            {3.66369, 4.81644, 0.1754648, 0.03562718},
            {3.565684, 4.757928, 0.1619488, 0.04401689},
            {3.783132, 4.807621, 0.2462349, 0.02830378},
            {3.641322, 4.695385, 0.1785645, 0.04546237},
            {3.6362, 4.77279, 0.1779788, 0.01324523},
            {3.580232, 4.766532, 0.1593941, 0.03871451},
            {3.647325, 4.842663, 0.1674617, 0.02087759},
            {3.629197, 4.695384, 0.1413259, 0.04049136},
            {3.64542, 4.732926, 0.1524635, 0.03509132},
            {3.585797, 4.729782, 0.1655144, 0.02646657},
            {3.595339, 4.801802, 0.18057, 0.01113184},
            {3.599353, 4.698796, 0.1707549, 0.01465228},
            {3.693067, 4.762504, 0.09148469, 0.01801851},
            {3.66311, 4.739455, 0.08709471, 0.01418463},
            {3.693763, 4.84324, 0.09285262, 0.007017573},
            {3.661466, 4.771751, 0.08056565, 0.02758796},
            {3.789403, 4.84193, 0.08038111, 0.02020271},
            {3.752624, 4.81652, 0.08111905, 0.0165293},
            {3.813215, 4.890468, 0.1118991, 0.01948114},
            {3.72502, 4.785139, 0.1160927, 0.03475863},
            {3.770843, 4.837455, 0.139066, 0.04255961},
            {3.713289, 4.86724, 0.1483338, 0.02643326},
            {3.745108, 4.922232, 0.1531502, 0.0257525},
            {3.722089, 4.799556, 0.1633086, 0.03060044},
            {3.733176, 4.875043, 0.1217751, 0.03234783},
            {3.73251, 4.868998, 0.1244276, 0.01839737},
            {3.788271, 4.936803, 0.1403705, 0.01293679},
            {3.705715, 4.802846, 0.1309405, 0.03287275},
            {3.813328, 4.890625, 0.1293602, 0.02457126},
            {3.821703, 4.891206, 0.1282173, 0.007255171},
            {3.849595, 4.96843, 0.1410654, 0.02145494},
            {3.80396, 4.834531, 0.1339188, 0.01938634},
            {3.863014, 4.923077, 0.1397619, 0.03723472},
            {3.852309, 4.93591, 0.1445332, 0.01262335},
            {3.826078, 4.980688, 0.1551216, 0.02735139},
            {3.782735, 4.866376, 0.1612681, 0.004273511},
            {3.830368, 4.959666, 0.1544364, 0.01900796},
            {3.825409, 4.95232, 0.1516905, 0.01453816}
        };

        CointegrationMLE instance = new CointegrationMLE(new SimpleMultiVariateTimeSeries(finland), true, 2);

        Vector eigenvalues = new DenseVector(instance.getEigenvalues());
        assertEquals(0.31890664561588078, eigenvalues.get(1), 1e-13);
        assertEquals(0.24501278520335165, eigenvalues.get(2), 1e-13);
        assertEquals(0.07213938534730330, eigenvalues.get(3), 1e-13);
        assertEquals(0.02140750176312445, eigenvalues.get(4), 1e-13);

        assertTrue(AreMatrices.equal(
                instance.beta(),
                new DenseMatrix(new double[][]{
                    {1, 1, 1, 1},
                    {-1.117163192592186, -1.6206016207749185, -0.9074816389142512, 1.507579628189647},
                    {-4.682914057720603, 0.6434857051066775, 0.3116962076901854, -1.535948270415342},
                    {5.467442492382142, 38.3345425682458227, -2.0157541727843529, -8.090441172463882}
                }),
                1e-10));

        assertTrue(AreMatrices.equal(
                instance.alpha(),
                new DenseMatrix(new double[][]{
                    {0.056932283139840452, -0.023040222023143285, -0.1421986420817251406, -0.004579512328275698},
                    {0.062776880150801476, 0.001260473398555495, 0.0008129484620369383, -0.008006408808124494},
                    {0.106594339293950832, 0.004316391883630226, -0.0134648230124863027, 0.002091417747124073},
                    {-0.002854964965332722, -0.013111001528296383, 0.0172870124956847060, 0.000961135280833562}}),
                1e-13));

        JohansenTest test = new JohansenTest(JohansenAsymptoticDistribution.Test.EIGEN, JohansenAsymptoticDistribution.TrendType.RESTRICTED_CONSTANT, instance.getEigenvalues().size());
        Vector stats = test.getStats(instance);
        assertEquals(39.94, stats.get(1), 1e-2);
        assertEquals(29.23, stats.get(2), 1e-2);
        assertEquals(7.79, stats.get(3), 1e-2);
        assertEquals(2.25, stats.get(4), 1e-2);
    }

    /**
     * This case fails even in R because of the data.
     * s_11 is singular matrix and cannot be inverted.
     */
//    @Test
    public void test_0020() {
        double[][] finland = new double[][]{
            {104.32, 104.64},
            {104.64, 104.75},
            {104.75, 105.17},
            {105.17, 105.48},
            {105.48, 105.66},
            {105.66, 104.67},
            {104.67, 105.55},
            {105.55, 105.81},
            {105.81, 104.67},
            {104.67, 105.97},
            {105.97, 104.86},
            {104.86, 102.88},
            {102.88, 100.6},
            {100.6, 101.06},
            {101.06, 100.64},
            {100.64, 101.14},
            {101.14, 99.95},
            {99.95, 98.97},
            {98.97, 100.38},
            {100.38, 101.68},
            {101.68, 101.16},
            {101.16, 98.01},
            {98.01, 98.29},
            {98.29, 97.45},
            {97.45, 98.73},
            {98.73, 98.53},
            {98.53, 99.5},
            {99.5, 99.25},
            {99.25, 101.05},
            {101.05, 101.5},
            {101.5, 102.17},
            {102.17, 102.41},
            {102.41, 102.3},
            {102.3, 101.07},
            {101.07, 102.07},
            {102.07, 101.88},
            {101.88, 102.03},
            {102.03, 103.06},
            {103.06, 103.3},
            {103.3, 103.36},
            {103.36, 103.75},
            {103.75, 105.21},
            {105.21, 105.21},
            {105.21, 105.39},
            {105.39, 105.88},
            {105.88, 106.33},
            {106.33, 106.31},
            {106.31, 106.36},
            {106.36, 107.2},
            {107.2, 107.83},
            {107.83, 107.79},
            {107.79, 107.24},
            {107.24, 107.79},
            {107.79, 108.58},
            {108.58, 107.98},
            {107.98, 107.8},
            {107.8, 107.88},
            {107.88, 108.07},
            {108.07, 108.09},
            {108.09, 107.73},
            {107.73, 108.54},
            {108.54, 109.4},
            {109.4, 109.59},
            {109.59, 108.99},
            {108.99, 109.36},
            {109.36, 110.09},
            {110.09, 110.29},
            {110.29, 110.37},
            {110.37, 111.6},
            {111.6, 111.7},
            {111.7, 109.9},
            {109.9, 110.39},
            {110.39, 111.28},
            {111.28, 111.17},
            {111.17, 111.43},
            {111.43, 112.22},
            {112.22, 111.74},
            {111.74, 109.12},
            {109.12, 109.85},
            {109.85, 111.28},
            {111.28, 109.43},
            {109.43, 110.86},
            {110.86, 108.22},
            {108.22, 107.54},
            {107.54, 104.08},
            {104.08, 102.48},
            {102.48, 106.99},
            {106.99, 106.65},
            {106.65, 108.15},
            {108.15, 106.85},
            {106.85, 104.84},
            {104.84, 104.97},
            {104.97, 103.5},
            {103.5, 102.98},
            {102.98, 98.97},
            {98.97, 100.46},
            {100.46, 99.16},
            {99.16, 99.2},
            {99.2, 98.65},
            {98.65, 101.93},
            {101.93, 100.68},
            {100.68, 98.95},
            {98.95, 101.52},
            {101.52, 101.94},
            {101.94, 98.43},
            {98.43, 97.11},
            {97.11, 98.19},
            {98.19, 97.61},
            {97.61, 100.49},
            {100.49, 100.96},
            {100.96, 100.78},
            {100.78, 103.15},
            {103.15, 103.1},
            {103.1, 103.24},
            {103.24, 103.38},
            {103.38, 102.98},
            {102.98, 101.34},
            {101.34, 101.04},
            {101.04, 99.34},
            {99.34, 99.62},
            {99.62, 98.93},
            {98.93, 95.87},
            {95.87, 94.91},
            {94.91, 94.61},
            {94.61, 94.17},
            {94.17, 94.67},
            {94.67, 97.69},
            {97.69, 98.61},
            {98.61, 99.32},
            {99.32, 99.39},
            {99.39, 100.93},
            {100.93, 100.91},
            {100.91, 101.03},
            {101.03, 98.13},
            {98.13, 98.71},
            {98.71, 99.84},
            {99.84, 98.57},
            {98.57, 100.8},
            {100.8, 101.63},
            {101.63, 102.76},
            {102.76, 102.66},
            {102.66, 101.95},
            {101.95, 101.54},
            {101.54, 101.55},
            {101.55, 103.79},
            {103.79, 103.29},
            {103.29, 103.95},
            {103.95, 103.82},
            {103.82, 103.45},
            {103.45, 104.01},
            {104.01, 103.4},
            {103.4, 100.53},
            {100.53, 100},
            {100, 99.6},
            {99.6, 99.62},
            {99.62, 100.86},
            {100.86, 101.03},
            {101.03, 99.32},
            {99.32, 98.95},
            {98.95, 98.55},
            {98.55, 97.13},
            {97.13, 97.46},
            {97.46, 96.71},
            {96.71, 98.34},
            {98.34, 96.91},
            {96.91, 96.95},
            {96.95, 99.82},
            {99.82, 100.74},
            {100.74, 102.07},
            {102.07, 100.91},
            {100.91, 101.58},
            {101.58, 102.07},
            {102.07, 102.57},
            {102.57, 103.74},
            {103.74, 103.67},
            {103.67, 104.04},
            {104.04, 104.02},
            {104.02, 104.1},
            {104.1, 105.69},
            {105.69, 105.42},
            {105.42, 104.92},
            {104.92, 103.52},
            {103.52, 105.71},
            {105.71, 105.12},
            {105.12, 105.64},
            {105.64, 105.38},
            {105.38, 105.06},
            {105.06, 105.52},
            {105.52, 104.68},
            {104.68, 106.86},
            {106.86, 106.85},
            {106.85, 106.67},
            {106.67, 107.32},
            {107.32, 107.34},
            {107.34, 107.75},
            {107.75, 108.52},
            {108.52, 108.13},
            {108.13, 108.35},
            {108.35, 109.13},
            {109.13, 107.4},
            {107.4, 108.55},
            {108.55, 108.75},
            {108.75, 109},
            {109, 109.24},
            {109.24, 109.24},
            {109.24, 108.96},
            {108.96, 109.09},
            {109.09, 109.04},
            {109.04, 109.14},
            {109.14, 109.99},
            {109.99, 110.42},
            {110.42, 112.56},
            {112.56, 113.01},
            {113.01, 112.78},
            {112.78, 111.91},
            {111.91, 112.42},
            {112.42, 111.95},
            {111.95, 110.63},
            {110.63, 110.5},
            {110.5, 108.74},
            {108.74, 108.78},
            {108.78, 110.45},
            {110.45, 110.74},
            {110.74, 110.57},
            {110.57, 108.99},
            {108.99, 110.62},
            {110.62, 109.82},
            {109.82, 109.7},
            {109.7, 109.04},
            {109.04, 111.41},
            {111.41, 112.84},
            {112.84, 113.14},
            {113.14, 113},
            {113, 113.06},
            {113.06, 113.51},
            {113.51, 113.95},
            {113.95, 114.64},
            {114.64, 114.66},
            {114.66, 114.76},
            {114.76, 114.18},
            {114.18, 114.89},
            {114.89, 114.98},
            {114.98, 115.28},
            {115.28, 115.99},
            {115.99, 116.4},
            {116.4, 115.72},
            {115.72, 115.79},
            {115.79, 115.88},
            {115.88, 116.02},
            {116.02, 115.84},
            {115.84, 115.82}
        };

        CointegrationMLE instance = new CointegrationMLE(new SimpleMultiVariateTimeSeries(finland), true, 2);

        System.out.println("eigenvalues:");
        System.out.println(instance.getEigenvalues());
        System.out.println("cointegrating factors");
        System.out.println(instance.beta());
        System.out.println("speeds of adjustment");
        System.out.println(instance.alpha());
    }

    @Test
    public void test_0030() {
        double[][] data = new double[][]{
            {57.120000, 54.370000},
            {56.550000, 54.120000},
            {56.730000, 54.620000},
            {57.580000, 55.490000},
            {57.570000, 55.130000},
            {57.660000, 55.190000},
            {58.410000, 56.410000},
            {57.600000, 55.130000},
            {58.140000, 55.710000},
            {58.190000, 56.080000},
            {57.820000, 55.510000},
            {57.530000, 54.770000},
            {58.820000, 56.320000},
            {59.160000, 56.900000},
            {59.940000, 57.360000},
            {59.820000, 57.560000},
            {60.300000, 56.130000},
            {60.960000, 55.900000},
            {61.360000, 56.300000},
            {61.630000, 56.060000},
            {61.530000, 55.660000},
            {61.820000, 55.800000},
            {62.300000, 56.790000},
            {62.340000, 57.110000},
            {62.360000, 57.350000},
            {62.690000, 57.240000},
            {63.040000, 57.660000},
            {62.610000, 56.980000},
            {62.100000, 56.820000},
            {61.090000, 56.020000},
            {61.550000, 56.660000},
            {62.470000, 57.610000},
            {63.130000, 57.290000},
            {63.480000, 57.000000},
            {62.950000, 56.250000},
            {63.940000, 57.150000},
            {63.680000, 57.190000},
            {63.380000, 56.670000},
            {62.750000, 56.310000},
            {61.750000, 55.830000},
            {61.180000, 55.160000},
            {61.570000, 55.530000},
            {61.910000, 56.820000},
            {60.740000, 55.860000},
            {61.200000, 56.010000},
            {60.400000, 55.000000},
            {58.710000, 53.100000},
            {58.500000, 52.580000},
            {59.090000, 53.440000},
            {58.500000, 53.150000},
            {58.450000, 52.920000},
            {59.940000, 53.830000},
            {59.220000, 53.010000},
            {57.960000, 52.140000},
            {58.570000, 53.150000},
            {58.690000, 53.050000},
            {58.820000, 53.260000},
            {60.060000, 54.460000},
            {60.690000, 54.990000},
            {60.990000, 55.270000}
        };

        CointegrationMLE instance = new CointegrationMLE(new SimpleMultiVariateTimeSeries(data), true, 2);

        assertArrayEquals(new double[]{0.090145, 0.080225}, instance.getEigenvalues().toArray(), 1e-6);
        assertArrayEquals(new double[]{1, -2.105374}, instance.beta(1).toArray(), 1e-6);
        assertArrayEquals(new double[]{1, 0.002519}, instance.beta(2).toArray(), 1e-6);

        JohansenTest test = new JohansenTest(JohansenAsymptoticDistribution.Test.EIGEN, JohansenAsymptoticDistribution.TrendType.RESTRICTED_CONSTANT, instance.getEigenvalues().size());
        Vector stats = test.getStats(instance);
        assertArrayEquals(new double[]{5.479275, 4.850342}, stats.toArray(), 1e-6);
    }
}
